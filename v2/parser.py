from typing import List, Dict, Any, Optional
import json
import time
from datetime import datetime

def to_visualizer_format(transactions: List[Dict[str, Any]], agents: List[Dict[str, Any]]) -> Dict[str, Any]:
    """
    Convert transactions and agents into a format suitable for visualization.
    
    The output format includes various action types like:
    - CreateUserPerson
    - CreateMonetaryAccount
    - GetAccountOverview
    - MakePayment
    - RequestPayment
    - RespondToPaymentRequest
    - ListPayments
    
    Args:
        transactions: List of transaction dictionaries
        agents: List of agent dictionaries
        
    Returns:
        Dictionary containing formatted actions for visualization
    """
    visualization_data = []
    
    # Create User actions for all agents
    for idx, agent in enumerate(agents):
        # Create user person action
        visualization_data.append({
            "action_type": "CreateUserPerson"
        })
        
        # Create monetary account action
        user_id = idx  # User ID generated by UI
        visualization_data.append({
            "action_type": "CreateMonetaryAccount",
            "user_id": user_id,
            "currency": "EUR",  # Assuming EUR as default currency
            "daily_limit_value": 5000.0  # Default daily limit
        })
        
        # Get account overview action
        visualization_data.append({
            "action_type": "GetAccountOverview",
            "monetary_account_id": user_id  # Same as user_id for simplicity
        })
    
    # Process all transactions
    for transaction in transactions:
        if transaction['type'] == 'PAYMENT':
            # For payment transactions
            user_id = next((idx for idx, agent in enumerate(agents) 
                            if agent['iban'] == transaction.get('counterparty_iban')), 0)
            
            visualization_data.append({
                "action_type": "MakePayment",
                "user_id": user_id,
                "monetary_account_id": user_id,  # Source account
                "amount_value": float(transaction['amount']),
                "amount_currency": transaction['currency'],
                "counterparty_iban": transaction['counterparty_iban']
            })
            
            # Add a ListPayments action after each payment
            visualization_data.append({
                "action_type": "ListPayments",
                "user_id": user_id,
                "monetary_account_id": user_id
            })
            
        elif transaction['type'] == 'REQUEST':
            # For request transactions
            user_id = next((idx for idx, agent in enumerate(agents) 
                            if agent['iban'] == transaction.get('counterparty_iban')), 0)
            
            # Request payment action
            request_id = transaction['id']
            
            # Handle created timestamp - could be string or datetime
            created_time = transaction['created']
            if isinstance(created_time, str):
                try:
                    # Try to parse ISO format timestamp
                    expiry_timestamp = int(time.time()) + 604800  # Default: current time + 1 week
                    try:
                        dt = datetime.fromisoformat(created_time.replace('Z', '+00:00'))
                        expiry_timestamp = int(dt.timestamp()) + 604800
                    except (ValueError, TypeError):
                        # If parsing fails, try another common format
                        try:
                            dt = datetime.strptime(created_time, "%Y-%m-%d %H:%M:%S.%f")
                            expiry_timestamp = int(dt.timestamp()) + 604800
                        except (ValueError, TypeError):
                            pass  # Use default expiry time
                except Exception:
                    expiry_timestamp = int(time.time()) + 604800  # Fallback: current time + 1 week
            else:
                # Assume it's already a datetime object
                expiry_timestamp = int(created_time.timestamp()) + 604800
                
            visualization_data.append({
                "action_type": "RequestPayment",
                "user_id": user_id,
                "monetary_account_id": user_id,  # Receipt account
                "amount_value": float(transaction['amount']),
                "amount_currency": transaction['currency'],
                "counterparty_iban": transaction['counterparty_iban'],
                "expiry_date": expiry_timestamp  # 1 week from creation
            })
            
            # If the request has a status, add a response action
            if 'status' in transaction:
                status = "ACCEPTED" if transaction['status'] == "ACCEPTED" else "REJECTED"
                visualization_data.append({
                    "action_type": "RespondToPaymentRequest",
                    "user_id": user_id,
                    "monetary_account_id": user_id,
                    "request_response_id": request_id,
                    "status": status
                })
    
    return visualization_data

def transactions_to_visualizer_format(transactions: List[Dict[str, Any]], agents: List[Dict[str, Any]]) -> str:
    """
    Convert transactions and agents into a string format suitable for visualization.
    
    Args:
        transactions: List of transaction dictionaries
        agents: List of agent dictionaries
        
    Returns:
        String containing formatted actions for visualization as a JSON array
    """
    visualization_data = to_visualizer_format(transactions, agents)
    return json.dumps(visualization_data, indent=2)
